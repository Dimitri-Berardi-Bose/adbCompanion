#!/bin/bash

# Defining Directories 

homeDirectory="$HOME"
binDirectory="$homeDirectory/bin/"
adbCompanionDir="$binDirectory/adbCompanion/"
adbCompanionSrc="$adbCompanionDir/src/"

# Defining Commands
update="$adbCompanionSrc/selfUpdate"

# Defining Global Variables
deviceID=""
deviceName=""
isUpdated="false"

kvbashSetup()
{
	source $adbCompanionSrc/kv-bash/./kv-bash
}

inputArgs()
{
	helpString="\n
				Usages:\n
				adbshell -h (--help): Display Help\n
				adbshell -c (--clear): Clear Saved Names\n"
	
	if [[ -z $1 ]]; then
		return
	fi
	
	
	for arg in $@; do case $arg in
		--help|-h)
			echo -e $helpString
			exit
			;;
		--clear|-c)
			kvclear
			echo "Device Names Cleared Successfully"
			exit
			;;
		D3gN0 | -nu | --noupdate)
			isUpdated="true"
			;;
		*)
			echo -e "\n$arg is an unsupported command: See reference below"
			echo -e $helpString
			exit
		esac
	done
}

verify_server()
{
	# My server needs to be restarted with each new session
	# Unsure why, and probably an unneccesary step for most
	echo "Checking Device Permissions"
	
	if [[ $(adb devices | grep -w "no permissions") != "" ]]; then
		echo "User Currently Lacks Permissions: Restarting Server"
		eatOutput=$(adb kill-server)
		eatOutput=$(sudo adb start-server)
		echo "ADB Server Reset"
	fi
}

installZenity()
{
	downZenity=$(which zenity)
	
	if [[ $downZenity == "" ]]; then
		echo
		sudo apt-get install zenity
	fi
}

setup()
{
	kvbashSetup
	inputArgs $@
	
	if [[ $isUpdated == "false" ]]; then
		$update
		exit 1
	fi
	
	verify_server
	installZenity
}

labelNewDevices()
{
	for line in $@; do
		if [[ $(kvget $line) == "" ]]; then
			input=$(zenity --title "Register New Device" --entry --text "Enter the name of device with following ID - $line" 2>/dev/null)
			
			if [[ $input == "" ]]; then
				continue
			fi
			
			if [[ $(kvget $input) != "" ]]; then
				zenity --error --text "That Name Already Exists"
				labelNewDevices $@
				return
			fi
			
			if [[ $input = *" "* ]]; then
				zenity --error --text "Name Can't Have Spaces"
				labelNewDevices $@
				return
			fi
			
			kvset $input $line
			kvset $line $input
		fi
	done
}

chooseService()
{
	adbShell="adb shell"
	cpBinsSpotify="cp-bins-to-target [Spotify]"
	collectLogs="start collecting log to /bin/"
	
	services=("$adbShell")
	services+=("$cpBinsSpotify")
	services+=("$collectLogs")
	service=$(zenity --title "Services" --list --text "Choose a Service on $deviceName" --column "Services" "${services[@]}" 2>/dev/null);
	
	echo
	case "$service" in
		"${services[0]}")
			adb -s $deviceID shell
			exit
			;;
		"${services[1]}")
			cd
			cd /scratch/git/AudioSource-Spotify
			cp-bins-to-target --deviceid $deviceID -spotify
			adb -s $deviceID shell /opt/Bose/bin/Spotify &
			echo -e "\nYou Should Close This Tab ($ exit) and Open a New One (Ctrl+Shift+T) To Avoid Debug Printouts\n"
			exit
			;;
		"${services[2]}")
			adblog -s $deviceID -l
			;;
		*)
			exit
			;;
	esac
}

######## Main Script Starts Here #########

setup $@

devices=$(adb devices | grep -w "device" | cut -c -7)

if [[ $devices == "" ]]; then
	zenity --error --text "No Devices Plugged In"
	exit
fi

labelNewDevices $devices

for line in $devices; do
	if [[ $(kvget $line) != "" ]]; then  
		devlist="${devlist} $(kvget $line)"
	else
		devlist="${devlist} $line"
	fi
done

echo
ans=$(zenity --title "adb shell GUI" --list --text "Choose a Device" --column "Device" $devlist 2>/dev/null);

if [[ $ans != "" ]]; then
	if [[ $(kvget $ans) != "" ]]; then
		deviceID=$(kvget $ans)
		deviceName=$ans
	else
		deviceID=$ans
		deviceName=$ans
	fi
else
	exit
fi

chooseService


